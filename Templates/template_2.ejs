<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
  <style>
    *, *::before, *::after {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    :root {
      --primary-color: #ffffff;
      --secondary-color: #a9a9ff;
      --accent-color: #8a8aff;
      --background-color: #0a0a0a;
      --background-secondary: #111111;
      --text-primary: rgba(255, 255, 255, 0.9);
      --text-secondary: rgba(255, 255, 255, 0.6);
      --button-hover: #7a7aee;
      --input-background: rgba(255, 255, 255, 0.1);
      --success-color: #4caf50;
      --error-color: #f44336;
      --border-radius: 8px;
      --spacing-xs: 4px;
      --spacing-sm: 8px;
      --spacing-md: 16px;
      --spacing-lg: 24px;
      --spacing-xl: 32px;
      --spacing-xxl: 48px;
    }

    body {
      font-family: 'Inter', sans-serif;
      background-color: var(--background-color);
      color: var(--text-primary);
      min-height: 100vh;
      line-height: 1.5;
      -webkit-font-smoothing: antialiased;
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .container {
      position: relative;
      min-height: 100vh;
      width: 100%;
      overflow: hidden;
      display: flex;
      justify-content: center;
      align-items: center;
      padding: 0 var(--spacing-xl);
    }

    .content {
      max-width: 800px;
      width: 100%;
      z-index: 10;
      padding: var(--spacing-lg);
      text-align: center;
      margin: 0 auto;
    }

    .logo {
      display: flex;
      justify-content: center;
      margin-bottom: var(--spacing-lg);
    }

    .logo-icon {
      width: 48px;
      height: 48px;
      border-radius: 12px;
      background-color: var(--primary-color);
      color: var(--background-color);
      display: flex;
      justify-content: center;
      align-items: center;
      font-weight: 700;
      font-size: 24px;
    }

    .announcement-banner {
      background-color: rgba(255, 255, 255, 0.1);
      padding: var(--spacing-sm) var(--spacing-lg);
      border-radius: 50px;
      display: inline-flex;
      align-items: center;
      gap: var(--spacing-sm);
      margin-bottom: var(--spacing-xxl);
    }

    .title {
      font-size: 3.2em;
      font-weight: 700;
      margin-bottom: var(--spacing-xl);
      line-height: 1.2;
      max-width: 700px;
      margin-left: auto;
      margin-right: auto;
    }

    .description {
      font-size: 1.1em;
      color: var(--text-secondary);
      margin-bottom: var(--spacing-xl);
      max-width: 600px;
      margin-left: auto;
      margin-right: auto;
      line-height: 1.6;
    }

    .waitlist-form {
      margin-bottom: var(--spacing-xl);
    }

    .input-group {
      display: flex;
      max-width: 500px;
      margin: 0 auto;
      gap: var(--spacing-md);
    }

    input[type="email"] {
      flex: 1;
      padding: var(--spacing-md) var(--spacing-lg);
      border-radius: var(--border-radius);
      background-color: var(--input-background);
      border: 1px solid rgba(255, 255, 255, 0.2);
      color: var(--primary-color);
      outline: none;
      font-size: 1em;
    }

    input[type="email"]::placeholder {
      color: var(--text-secondary);
    }

    .btn-join {
      padding: var(--spacing-md) var(--spacing-xl);
      background-color: var(--accent-color);
      color: var(--primary-color);
      border-radius: var(--border-radius);
      font-weight: 500;
      border: none;
      cursor: pointer;
      transition: background-color 0.3s ease, transform 0.2s ease;
      white-space: nowrap;
    }

    .btn-join:hover {
      background-color: var(--button-hover);
      transform: translateY(-2px);
    }

    .form-message {
      margin-top: var(--spacing-md);
      height: 20px;
    }

    .form-message.success {
      color: var(--success-color);
    }

    .form-message.error {
      color: var(--error-color);
    }

 

    .avatars {
      display: flex;
      margin-bottom: var(--spacing-sm);
    }

    .avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      border: 2px solid var(--background-color);
      position: relative;
    }

    .avatar:nth-child(1) { background-color: #e0a94f; z-index: 3; }
    .avatar:nth-child(2) { background-color: #4fa7e0; margin-left: -10px; z-index: 2; }
    .avatar:nth-child(3) { background-color: #e04f8f; margin-left: -10px; z-index: 1; }


    .decorative-element {
      position: fixed;
      z-index: 1;
      opacity: 0.8;
      pointer-events: none;
    }

    .cube {
      width: 100px;
      height: 100px;
      background-color: rgba(169, 169, 255, 0.1);
      border: 1px solid rgba(169, 169, 255, 0.3);
      top: 20%;
      left: 15%;
      border-radius: 16px;
      animation: float 8s ease-in-out infinite;
    }

    .sphere {
      width: 120px;
      height: 120px;
      background: radial-gradient(circle, rgba(169, 169, 255, 0.2) 0%, rgba(10, 10, 10, 0) 70%);
      border-radius: 50%;
      top: 15%;
      right: 15%;
      animation: pulse 6s ease-in-out infinite;
    }

    .spiral {
      width: 150px;
      height: 150px;
      background: conic-gradient(
        from 0deg, 
        rgba(169, 169, 255, 0) 0%, 
        rgba(169, 169, 255, 0.1) 25%, 
        rgba(169, 169, 255, 0.2) 50%, 
        rgba(169, 169, 255, 0.1) 75%, 
        rgba(169, 169, 255, 0) 100%
      );
      border-radius: 50%;
      bottom: 15%;
      right: 15%;
      animation: rotate 20s linear infinite;
    }

    .asterisk {
      width: 120px;
      height: 120px;
      bottom: 20%;
      left: 15%;
      position: fixed;
      animation: rotate 15s linear infinite;
    }

    .asterisk::before,
    .asterisk::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 100%;
      height: 2px;
      background-color: rgba(169, 169, 255, 0.3);
      transform-origin: center;
    }

    .asterisk::before {
      transform: translate(-50%, -50%) rotate(0deg);
    }

    .asterisk::after {
      transform: translate(-50%, -50%) rotate(90deg);
    }

    @keyframes float {
      0% { transform: translateY(0) rotate(0deg); }
      50% { transform: translateY(-10px) rotate(5deg); }
      100% { transform: translateY(0) rotate(0deg); }
    }

    @keyframes pulse {
      0% { transform: scale(1); opacity: 0.8; }
      50% { transform: scale(1.05); opacity: 1; }
      100% { transform: scale(1); opacity: 0.8; }
    }

    @keyframes rotate {
      from { transform: rotate(0deg); }
      to { transform: rotate(360deg); }
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(20px); }
      to { opacity: 1; transform: translateY(0); }
    }

    @media (max-width: 768px) {
      .title { 
        font-size: 2.5em;
        padding: 0 var(--spacing-md);
      }
      .description { 
        font-size: 1em;
        padding: 0 var(--spacing-md);
      }
      .input-group { 
        flex-direction: column;
        padding: 0 var(--spacing-md);
      }
      .btn-join { width: 100%; }
      .decorative-element { transform: scale(0.7); }
    }

    @media (max-width: 480px) {
      .title { font-size: 2em; }
      .container { padding: var(--spacing-md); }
      .content { padding: var(--spacing-sm); }
      .decorative-element { 
        opacity: 0.5;
        transform: scale(0.5);
      }
    }
  </style>
</head>
<body>
  <div class="container">
    <div class="decorative-element cube"></div>
    <div class="decorative-element sphere"></div>
    <div class="decorative-element spiral"></div>
    <div class="decorative-element asterisk"></div>
    
    <div class="content">
      <header>
        <div class="announcement-banner">
          <span class="icon">ðŸ”¥</span>
          <span class="text"><%= preheading %></span>
        </div>
      </header>

      <main>
        <h1 class="title">
          <%= heading %>
        </h1>
        
        <p class="description">
            <%= subheading %>
        </p>
        
        <form id="waitlist-form" class="waitlist-form">
          <div class="input-group">
            <input type="email" id="email" placeholder="Your Email Address" required>
            <button type="submit" class="btn-join">Join Waitlist â†’</button>
          </div>
          <p class="form-message" id="form-message"></p>
        </form>
      </main>
    </div>
  </div>

  <script>


    document.addEventListener('DOMContentLoaded', () => {
      const form = document.getElementById('waitlist-form');
      const emailInput = document.getElementById('email');
      const formMessage = document.getElementById('form-message');
      const decorativeElements = document.querySelectorAll('.decorative-element');
      
      // Email validation regex
      const emailRegex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      
      // Parallax effect
      document.addEventListener('mousemove', (e) => {
        const x = e.clientX / window.innerWidth;
        const y = e.clientY / window.innerHeight;
        
        decorativeElements.forEach(element => {
          const speedX = element.offsetWidth * 0.05;
          const speedY = element.offsetHeight * 0.05;
          
          const moveX = (x - 0.5) * speedX;
          const moveY = (y - 0.5) * speedY;
          
          element.style.transform = `translate(${moveX}px, ${moveY}px)`;
        });
      });

      // Form validation
      function validateEmail() {
        const email = emailInput.value.trim();
        
        if (email === '') {
          formMessage.textContent = '';
          formMessage.className = 'form-message';
          return false;
        }
        
        if (!emailRegex.test(email)) {
          formMessage.textContent = 'Please enter a valid email address.';
          formMessage.className = 'form-message error';
          return false;
        }
        
        formMessage.textContent = '';
        formMessage.className = 'form-message';
        return true;
      }

      emailInput.addEventListener('input', validateEmail);
      
      form.addEventListener('submit', (e) => {
        e.preventDefault();
        
        if (validateEmail()) {
          formMessage.textContent = 'Thanks for joining our waitlist!';
          formMessage.className = 'form-message success';
          
          setTimeout(() => {
            emailInput.value = '';
          }, 2000);
        }
      });

    });

    let pageId = `<%= pageId %>`;

      function sendData(inputValue) {
        fetch(`https://waitlist-app-ugpw.onrender.com/api/subscriber/${pageId}`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({ email: inputValue }), // You can change the key as needed
        })
          .then((response) => {
            return response.json(); // If expecting JSON in response
          })
          .then((data) => {
            console.log("Success:", data); // Handle success
          })
          .catch((error) => {
            console.error("Error:", error); // Handle errors
          });
      }

  </script>
</body>
</html>